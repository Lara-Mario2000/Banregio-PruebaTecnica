# -*- coding: utf-8 -*-
"""test_python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-PdWOoFca8eGpOkeisCgKCIkIdY7U9vZ
"""

import pandas as pd
from matplotlib import pyplot as plt
import numpy as np

# Cargue los datos desde la url dada en un dataframe llamado df_students e imprima una muestra de 5 registros
url = 'https://raw.githubusercontent.com/MicrosoftDocs/mslearn-introduction-to-machine-learning/main/Data/ml-basics/grades.csv'
'''
hint: use pandas
delimitador: ","
encabezado: 'infer'
'''

df_students = pd.read_csv(url)
print(df_students)

# Remueva cualquier fila con datos faltantes
print(df_students.isnull().sum())

df_students = df_students.dropna()
print(df_students.isnull().sum())

# Muestre en un nuevo dataframe el promedio total y promedio de horas de estudio por estudiante
'''
hint: use groupby
'''
promedio_alumnos = df_students.groupby('Name')['StudyHours'].mean().reset_index()
promedio_alumnos['MeanStudyHours'] = df_students['StudyHours'].mean()
print(promedio_alumnos)

# Asigne el pase o no a los estudiantes (pase >= 70) e imprima el resultado

alumnos_pase = df_students
alumnos_pase['Approval'] = np.where(alumnos_pase['Grade'] >= 70, True, False)
print(alumnos_pase)

# Defina una funcion que calcule el mínimo, máximo, promedio, mediana y moda dada una serie de datos. Pruebe con la serie "Grade"
# del objeto df_students.

'''
Hint:
def funcion(data):
    ...
    return [minimo, maximo, mean, mediana, moda]

estadisticas = funcion(data)
print(estadisticas)
'''

def funcion(data):
    import statistics
    data = np.array(data)
    minimo = min(data)
    maximo = max(data)
    mean = np.mean(data)
    mediana = np.median(data)
    vals, counts = np.unique(data,return_counts = True)
    mode = int(vals[counts == np.max(counts)])

    return [minimo, maximo, mean, mediana, mode]

statistics = funcion(df_students['Grade'])
print(statistics)

# Defina una funcion que genere un gráfico, un histograma dada una serie de datos, adicional que añada lineas en color
# para las diferentes estadisticas obtenidas en el paso anterior. Use la serie "Grade" del objeto df_students

'''
Hint:
def histograma(data):

    *use .hist para histograma y .axvline para lineas
    *colores: minimo y maximo: 'gray', mean:'cyan', mediana:'red', moda:'yellow'

    plt.hist(...)
    plt.axvline(...)
        ...

    plt.ylabel('Frequencia')
    plt.xlabel('Valor')
    plt.suptitle('Distribución')
    plt.show()

histograma(data)
'''

def histograma(data):

    values = funcion(data)

    plt.hist(data)
    plt.axvline(values[0], color='gray')
    plt.axvline(values[1], color='gray')
    plt.axvline(values[2], color='cyan')
    plt.axvline(values[3], color='red')
    plt.axvline(values[4], color='yellow')

    plt.ylabel('Frequencia')
    plt.xlabel('Valor')
    plt.suptitle('Distribución')

    plt.savefig('./imgs/histograma')
    plt.show()

histograma(df_students['Grade'])

# Defina una funcion que generé un gráfico tipo caja(boxplot) usando la serie 'Grade' y de su interpretación

def boxplot(data):

    plt.boxplot(data, patch_artist=True, boxprops=dict(facecolor='lightgreen'))
    plt.title('Distribución')

    plt.savefig('./imgs/boxplot')
    plt.show()

boxplot(df_students['Grade'])

# Calcule la correlación entre "studyhours" y "grade". De su interpretación del resultado, si es positiva o negativa.
def get_correlation(data1, data2):
    correlacion = data1.corr(data2)

    plt.scatter(data1, data2, alpha=0.7)

    plt.title(f'Gráfico de Dispersión de StudyHours vs. Grade\nCorrelación: {correlacion:.2f}')
    plt.xlabel('StudyHours')
    plt.ylabel('Grade')

    plt.savefig('./imgs/correlation')
    plt.show()
    

get_correlation(df_students['StudyHours'], df_students['Grade'])